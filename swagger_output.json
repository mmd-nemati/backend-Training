{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Moria OpenAPI",
    "description": "OpenAPI documentation of <b>Moria</b> social media."
  },
  "servers": [
    {
      "url": "http://localhost:5000/"
    },
    {
      "url": "https://localhost:5000/"
    }
  ],
  "tags": [
    {
      "name": "User",
      "description": "Endpoints"
    },
    {
      "name": "Post",
      "description": "Endpoints"
    },
    {
      "name": "Like",
      "description": "Endpoints"
    }
  ],
  "paths": {
    "/api/users/": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Endpoint to get all users.",
        "parameters": [
          {
            "$ref": "#myParameters/listQuery/page"
          },
          {
            "$ref": "#myParameters/listQuery/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "description": "Endpoint to create a new user.",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Returns the created user, no updatedAt.",
            "headers": {
              "x-auth-token": {
                "type": "string",
                "description": "JWT token."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Endpoint to get one specific user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "description": "Endpoint to edit a user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#myParameters/jwtToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated user, no createdAt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "description": "Non of the parameters are required.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditUser"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EditUser"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "description": "Endpoint to delete a user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#myParameters/jwtToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns some message."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Endpoint to login.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logged in successfully.",
            "headers": {
              "x-auth-token": {
                "type": "string",
                "description": "JWT token."
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "description": "Only need one of username or email parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUser"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/LoginUser"
              }
            }
          }
        }
      }
    },
    "/api/posts/": {
      "get": {
        "tags": [
          "Post"
        ],
        "description": "Endpoint to get all posts.",
        "parameters": [
          {
            "$ref": "#myParameters/listQuery/page"
          },
          {
            "$ref": "#myParameters/listQuery/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list of posts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Post"
        ],
        "description": "Endpoint to create a new post.",
        "parameters": [
          {
            "$ref": "#myParameters/jwtToken"
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyPost"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ModifyPost"
              }
            }
          }
        }
      }
    },
    "/api/posts/{id}": {
      "get": {
        "tags": [
          "Post"
        ],
        "description": "Endpoint to get one specific post.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Post"
        ],
        "description": "Endpoint to edit a post.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#myParameters/jwtToken"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Returns the edited post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "description": "Non of the parameters are required.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyPost"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ModifyPost"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Post"
        ],
        "description": "Endpoint to delete a post.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#myParameters/jwtToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns some message."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/likes/": {
      "get": {
        "tags": [
          "Like"
        ],
        "description": "Endpoint to get all likes.",
        "parameters": [
          {
            "$ref": "#myParameters/listQuery/page"
          },
          {
            "$ref": "#myParameters/listQuery/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list of likes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Like"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Like"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/likes/{id}": {
      "get": {
        "tags": [
          "Like"
        ],
        "description": "Endpoint to get one specific like.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested like.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Like"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Like"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Frodo Baggins"
          },
          "username": {
            "type": "string",
            "example": "frodoBagg"
          },
          "age": {
            "type": "number",
            "example": 51
          },
          "createdAt": {
            "type": "string",
            "example": "2022-08-12T17:35:23.017Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2022-09-11T20:11:56.017Z"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "NewUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Frodo Baggins"
          },
          "username": {
            "type": "string",
            "example": "Frodo_Baggins"
          },
          "email": {
            "type": "string",
            "example": "frodo@baggins.com"
          },
          "age": {
            "type": "number",
            "example": 51
          },
          "phoneNumber": {
            "type": "string",
            "example": "09190000000"
          },
          "password": {
            "type": "string",
            "example": "Frodo@123"
          }
        },
        "xml": {
          "name": "NewUser"
        }
      },
      "EditUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Frodo Baggins"
          },
          "username": {
            "type": "string",
            "example": "frodoBagg"
          },
          "age": {
            "type": "number",
            "example": 51
          }
        },
        "xml": {
          "name": "EditUser"
        }
      },
      "LoginUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "Frodo_Baggins"
          },
          "email": {
            "type": "string",
            "example": "Frodo@baggins.com"
          },
          "password": {
            "type": "string",
            "example": "Frodo@123"
          }
        },
        "xml": {
          "name": "LoginUser"
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "New post from Shire!"
          },
          "text": {
            "type": "string",
            "example": "Todat is a nice day! Hope to enjoy it."
          },
          "user": {
            "type": "string",
            "example": "Frodo_Baggins"
          },
          "createdAt": {
            "type": "string",
            "example": "2022-08-12T17:35:23.017Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2022-09-11T20:11:56.017Z"
          }
        },
        "xml": {
          "name": "Post"
        }
      },
      "ModifyPost": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "New post from Shire!"
          },
          "text": {
            "type": "string",
            "example": "Todat is a nice day! Hope to enjoy it."
          }
        },
        "xml": {
          "name": "ModifyPost"
        }
      },
      "Like": {
        "type": "object",
        "properties": {
          "post": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "62fc1563f537fd538eceb2dc"
              },
              "title": {
                "type": "string",
                "example": "New post from Shire!"
              }
            }
          },
          "user": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "example": "Frodo Baggins"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "example": "2022-08-17T20:15:39.919Z"
          }
        },
        "xml": {
          "name": "Like"
        }
      }
    },
    "securitySchemes": {
      "jwtAuth": {
        "type": "http",
        "scheme": "bearer",
        "name": "x-auth-token",
        "in": "header",
        "description": "JWT token for authentication and authentication."
      }
    }
  },
  "properties": {
    "createdAt": {
      "type": "string",
      "format": "date-time"
    }
  },
  "myParameters": {
    "jwtToken": {
      "name": "x-auth-token",
      "in": "header",
      "type": "string",
      "required": true
    },
    "listQuery": {
      "page": {
        "name": "page",
        "in": "query",
        "type": "number",
        "required": false
      },
      "limit": {
        "name": "limit",
        "description": "Number of results in every page.",
        "in": "query",
        "type": "number",
        "required": false
      }
    },
    "newEntity": {
      "user": {
        "name": {
          "name": "name",
          "type": "string",
          "required": true,
          "example": "Frodo Baggins"
        },
        "username": {
          "name": "username",
          "type": "string",
          "required": true,
          "example": "Frodo_Baggins"
        },
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "example": "frodo@baggins.com"
        }
      }
    }
  }
}